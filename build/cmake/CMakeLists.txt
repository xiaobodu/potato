cmake_minimum_required(VERSION 2.8)

project(all)

# define/check environment
if("${CMAKE_SYSTEM_NAME}" STREQUAL "Linux")
  set (OS_IS_LINUX TRUE)
  add_definitions(-DOS_IS_LINUX)
elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "Windows")
  set (OS_IS_WINDOWS TRUE)
  add_definitions(-DOS_IS_WINDOWS)
else()
  message(FATAL_ERROR "Sorry, don't support your system - ${CMAKE_SYSTEM_NAME}")
endif ()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  set(CXX_GNU TRUE)
  add_definitions(-DCXX_GNU)
  if(USE_COVERALLS)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage -Wall -fPIC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fprofile-arcs -ftest-coverage -Wall -fPIC -std=c++11")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fprofile-arcs -lgcov")
    add_definitions(-DBUILD_COVERALLS)
  else()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -fPIC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fPIC -std=c++11")
  endif()
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set(CXX_MSVC TRUE)
  add_definitions(-DCXX_MSVC)
else()
  message(FATAL_ERROR "Sorry, don't support your compiler - ${CMAKE_CXX_COMPILER_ID}")
endif()

if("${CMAKE_BUILD_TYPE}" STREQUAL "DEBUG" OR "${CMAKE_BUILD_TYPE}" STREQUAL "debug" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
  set(BUILD_DEBUG TRUE)
  if(OS_IS_LINUX AND CXX_GNU)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  endif()
  add_definitions(-DBUILD_DEBUG)
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "MINSIZEREL" OR "${CMAKE_BUILD_TYPE}" STREQUAL "minsizerel" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Minsizerel")
  set(BUILD_MINSIZEREL TRUE)
  add_definitions(-DBUILD_MINSIZEREL)
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "RELEASE" OR "${CMAKE_BUILD_TYPE}" STREQUAL "release" OR "${CMAKE_BUILD_TYPE}" STREQUAL "Release")
  set(BUILD_RELEASE TRUE)
  add_definitions(-DBUILD_RELEASE)
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "RELWITHDEBINFO" OR "${CMAKE_BUILD_TYPE}" STREQUAL "relwithdebinfo" OR "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
  set(BUILD_RELWITHDEBINFO TRUE)
  if(OS_IS_LINUX AND CXX_GNU)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  endif()
  add_definitions(-DBUILD_RELWITHDEBINFO)
else()
  message(FATAL_ERROR "Please set the CMAKE_BUILD_TYPE - DEBUG, MINSIZEREL, RELEASE, RELWITHDEBINFO")
endif()

if(OS_IS_LINUX AND CXX_GNU)
  MESSAGE(STATUS "Right, it will build as ${CMAKE_BUILD_TYPE} by ${CMAKE_CXX_COMPILER_ID} in ${CMAKE_SYSTEM_NAME}")
elseif(OS_IS_WINDOWS AND CXX_MSVC)
  MESSAGE(STATUS "Right, it will build as ${CMAKE_BUILD_TYPE} by ${CMAKE_CXX_COMPILER_ID} in ${CMAKE_SYSTEM_NAME}")
else()
  message(FATAL_ERROR "Sorry, it don't support to compile by ${CMAKE_CXX_COMPILER_ID} in ${CMAKE_SYSTEM_NAME}")
endif()

SET (C4G_BUILD_EDITOR ${C4G_BUILD_EDITOR} CACHE BOOL "Generate the potato editor" FORCE)

# define path
set(ROOT_PATH "${all_SOURCE_DIR}/../..")
set(CODE_PATH "${ROOT_PATH}/code")
set(OUT_PATH "${ROOT_PATH}/out")

# add sub-project
add_subdirectory(external)
add_subdirectory(potato)
if(C4G_BUILD_EDITOR)
add_subdirectory(editor)
endif()
add_subdirectory(demo)

